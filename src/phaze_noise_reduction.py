# -*- coding: utf-8 -*-
"""phaze_noise_reduction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GFWHRG29kSlOOjhW7Wnl7MSSKspyRkIY
"""

# --- 必要ライブラリ ---
# Pillow: 画像読み込み
# NumPy : 配列演算
# scikit-image: フィルタと大津の2値化
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
from skimage.filters import gaussian, threshold_otsu
import cv2
# ========== ユーザー設定 ==========
image_path_noise = "spinodal_gray_noise200.png"  # 入力画像
image_path_mask = "spinodal_mask.png"  # mask画像）
sigma = 1.5                # ガウスぼかしの標準偏差（大きいほど強くぼける）
# =================================

img_u8 = np.array(Image.open(image_path_noise).convert("L"), dtype=np.uint8)
img_u8

filtered=cv2.medianBlur(img_u8,15)
filtered

th = threshold_otsu(filtered)
bw = (filtered> th).astype(np.uint8)  # 処理“前”の2値（0 or 1）
plt.imshow(bw)
plt.show()

#画像の保存
bw_result=bw*255
img = Image.fromarray(bw_result.astype(np.uint8))
img.save("result.png")

#mask画像の読み込み
img_mask = np.array(Image.open(image_path_mask).convert("L"), dtype=np.uint8)/255
plt.imshow(img_mask)
plt.show()



#評価
MAE_after = np.mean(np.abs(img_mask.astype(float) - bw.astype(float)))
print(MAE_after)

#フィルタを使わずに２値化
th_noisy = threshold_otsu(img_u8)
bw_noisy = (img_u8> th_noisy).astype(np.uint8)  # 処理“前”の2値（0 or 1）
plt.imshow(bw_noisy)
plt.show()

#フィルタを使わずに２値化した場合のMAE
MAE_before = np.mean(np.abs(img_mask.astype(float) - img_u8.astype(float)))
print(MAE_before)